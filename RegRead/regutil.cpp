#include "regutil.h"

namespace regutil
{
    using namespace std;

    const tstring RegUtil::getRegRootString(HKEY rootKey)
    {
        REG_KEY_TYPE regKey = reinterpret_cast<REG_KEY_TYPE>(rootKey);

        switch (regKey)
        {
        case REG_ROOT_KEY::REG_HKEY_CLASSES_ROOT:
            return _T("HKEY_CLASSES_ROOT");
        case REG_ROOT_KEY::REG_HKEY_LOCAL_MACHINE:
            return _T("HKEY_LOCAL_MACHINE");
        case REG_ROOT_KEY::REG_HKEY_CURRENT_USER:
            return _T("HKEY_CURRENT_USER");
        case REG_ROOT_KEY::REG_HKEY_CURRENT_CONFIG:
            return _T("HKEY_CURRENT_CONFIG");
        case REG_ROOT_KEY::REG_HKEY_USERS:
            return _T("HKEY_USERS");
        default:
            return _T("UNKNOWN");
        }
    };

    void RegUtil::printRegValues(HKEY rootKey, const tstring& subPath)
    {
        HKEY key = NULL;
        const tstring& rootStr = getRegRootString(rootKey);

        tcout << format(_T("Reg key path : {:s}\\{:s}\n\n"), rootStr, subPath);

        if (RegOpenKeyEx(rootKey, subPath.c_str(), 0, KEY_READ, &key) == ERROR_SUCCESS)
        {
            DWORD valueCount = 0;
            DWORD maxValueLength = 0;
            DWORD maxValueNameLength = 0;
            DWORD valueNameSize = 0;
            DWORD valueType = 0;
            DWORD valueDataSize = 0;
            TextData valueName;
            BinaryData valueData;

            if (RegQueryInfoKey(key, NULL, 0, 0, NULL, NULL, NULL, 
                &valueCount, &maxValueNameLength, &maxValueLength, NULL, NULL) == ERROR_SUCCESS)
            {
                maxValueNameLength += 1; // NULL 문자 추가해야 함(NULL 문자 미 포함 길이가 리턴 되기 때문)
                valueName.assign(maxValueNameLength, 0);
                valueData.assign(maxValueLength, 0);
                valueNameSize = static_cast<DWORD>(valueName.size());
                valueDataSize = static_cast<DWORD>(valueData.size());

                for (DWORD index = 0; index < valueCount; index++)
                {
                    if (RegEnumValue(key, index, valueName.data(), &valueNameSize, NULL, 
                        &valueType, valueData.data(), &valueDataSize) == ERROR_SUCCESS)
                    {
                        if ((valueType == REG_SZ) || (valueType == REG_EXPAND_SZ) || (valueType == REG_MULTI_SZ))
                        {
                            tcout << format(_T("  Value Name: {:s}\n"), valueName.data());
                            tcout << format(_T("  Data: {:s}\n\n"), reinterpret_cast<const TCHAR*>(valueData.data()));
                        }
                        else
                        {
                            tcout << format(_T("  Unknown type: {:s}\n"), valueName.data());
                        }
                    }
                    fill(valueName.begin(), valueName.end(), _T('0'));
                    fill(valueData.begin(), valueData.end(), 0);
                    valueNameSize = static_cast<DWORD>(valueName.size());
                    valueDataSize = static_cast<DWORD>(valueData.size());
                }
            }
            RegCloseKey(key);
        }
        else
        {
            tcout << format(_T("Error opening registry key : {:s}\\{:s}\n\n"), rootStr, subPath);
        }
    };
};

